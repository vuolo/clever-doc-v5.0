import { create } from "xmlbuilder2";
import type { XMLBuilder } from "xmlbuilder2/lib/interfaces";
import type { CodedTransaction } from "~/types/coded-transaction";

type MacroFile = {
  name: string;
  platform: string;
  targetSoftware: string;
  contents: string;
};

export function createAndDownloadFile(filename: string, text: string) {
  const element = document.createElement("a");
  element.setAttribute(
    "href",
    "data:text/plain;charset=utf-8," + encodeURIComponent(text)
  );
  element.setAttribute("download", filename);

  element.style.display = "none";
  document.body.appendChild(element);

  element.click();

  document.body.removeChild(element);
}

function Accounting_CS_stringifyTextToType(
  platform: string,
  coded_transactions: CodedTransaction[]
) {
  const textToType: string[] = [];

  function getTabKey(platform: string) {
    return platform == "Mac"
      ? "%Tab%" // Keyboard Maestro's format
      : "{tab}"; // AutoHotKey's format
  }

  // Type each transaction in the format of: "{ACCOUNT_NUMBER}\t{ENTRY_DESCRIPTION}\t{TRANSACTION_AMOUNT}"
  coded_transactions.forEach((transaction) => {
    if (platform == "Windows") textToType.push("Send, ");

    // Use the account number and entry description from the selection
    textToType.push(transaction.selected_account.number + getTabKey(platform));
    textToType.push(transaction.coded_entry + getTabKey(platform));
    // Type the amount, but make sure to maximize the precision of the amount to 2 decimal places, and ensure it is a positive number
    textToType.push(
      Math.abs(transaction.amount).toFixed(2) + getTabKey(platform)
    );

    if (platform == "Windows") textToType.push("\n");
  });

  if (platform == "Windows") return textToType.join("").replaceAll("#", "{#}");
  return textToType.join("");
}

function stringifyTextToType(
  platform: string,
  targetSoftware: string,
  coded_transactions: CodedTransaction[]
): string {
  if (targetSoftware == "Accounting CS")
    return Accounting_CS_stringifyTextToType(platform, coded_transactions);
  return "";
}

function genBSCA_bankStatement(
  platform: string,
  targetSoftware: string,
  coded_transactions: CodedTransaction[],
  filename?: string
): MacroFile | undefined {
  const stringifiedTextToType = stringifyTextToType(
    platform,
    targetSoftware,
    coded_transactions
  );
  const bankStatementFilename = filename ?? "Unknown";

  // Keyboard Maestro's format
  if (platform == "Mac") {
    let root = create({ version: "1.0", encoding: "UTF-8" })
      .ele(
        `<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">`
      )

      .com("Macro Generated by Clever Doc (https://cleverdoc.ai)")
      .com("Tool: BSCA (Bank Statement Coding Automation)")
      .com(`Bank Statement: ${bankStatementFilename}`)

      .ele("plist", { version: "1.0" })

      .ele("array")
      .ele("dict");

    root = KeyboardMaestro_generateHeaders(root);
    root = KeyboardMaestro_generateAction(root, stringifiedTextToType);
    root = KeyboardMaestro_generateFooter(root, filename);

    root.com(`© ${new Date().getFullYear()} Clever Doc, LLC.`);

    // Convert the XML tree to string.
    const xml = root.end({ prettyPrint: true });

    return {
      name: `Open to Type Coded Transactions (${bankStatementFilename}).kmmacros`,
      platform: platform,
      targetSoftware: targetSoftware,
      contents: xml,
    };
  }

  // AutoHotKey's format
  else if (platform == "Windows") {
    const contents = [
      "; Macro Generated by Clever Doc (https://cleverdoc.ai)",
      "; Tool: BSCA (Bank Statement Coding Automation)",
      `; Bank Statement: ${bankStatementFilename}`,
      "",
      "+^T::",
      `${stringifiedTextToType}`,
      "ExitApp",
      "return",
      "",
      "Esc::ExitApp",
      "",
      `; © ${new Date().getFullYear()} Clever Doc, LLC.`,
    ].join("\n");

    return {
      name: `Open to Type Coded Transactions (${bankStatementFilename}).ahk`,
      platform: platform,
      targetSoftware: targetSoftware,
      contents,
    };
  }
}

export const generateMacro = (
  tool: string,
  platform: string,
  targetSoftware: string,
  coded_transactions: CodedTransaction[],
  filename?: string
): MacroFile | undefined => {
  if (tool == "BSCA.bankStatement")
    return genBSCA_bankStatement(
      platform,
      targetSoftware,
      coded_transactions,
      filename
    );
};

function KeyboardMaestro_generateHeaders(root: XMLBuilder): XMLBuilder {
  return root
    .ele("key")
    .txt("Activate")
    .up()

    .ele("string")
    .txt("Normal")
    .up()

    .ele("key")
    .txt("CreationDate")
    .up()

    .ele("real")
    .txt("690530224.64346004")
    .up()

    .ele("key")
    .txt("Macros")
    .up()

    .ele("array")
    .ele("dict")

    .ele("key")
    .txt("Actions")
    .up();
}

function KeyboardMaestro_generateAction(
  root: XMLBuilder,
  string: string
): XMLBuilder {
  return root
    .ele("array")
    .ele("dict")

    .ele("key")
    .txt("Action")
    .up()

    .ele("string")
    .txt("ByTyping")
    .up()

    .ele("key")
    .txt("ActionUID")
    .up()

    .ele("integer")
    .txt("1161")
    .up()

    .ele("key")
    .txt("MacroActionType")
    .up()

    .ele("string")
    .txt("InsertText")
    .up()

    .ele("key")
    .txt("TargetApplication")
    .up()

    .ele("dict")
    .up()

    .ele("key")
    .txt("TargetingType")
    .up()

    .ele("string")
    .txt("Front")
    .up()

    .ele("key")
    .txt("Text")
    .up()

    .ele("string")
    .txt(string)
    .up()

    .up()
    .up();
}

function KeyboardMaestro_generateFooter(
  root: XMLBuilder,
  filename?: string
): XMLBuilder {
  const bankStatementFilename = filename ?? "Unknown Filename";

  return root
    .ele("key")
    .txt("CreationDate")
    .up()

    .ele("real")
    .txt("690530509.90852594")
    .up()

    .ele("key")
    .txt("ModificationDate")
    .up()

    .ele("real")
    .txt("690531242.04153299")
    .up()

    .ele("key")
    .txt("Name")
    .up()

    .ele("string")
    .txt(`Open to Type Coded Transactions (${bankStatementFilename})`)
    .up()

    .ele("key")
    .txt("Triggers")
    .up()

    .ele("array")
    .ele("dict")

    .ele("key")
    .txt("FireType")
    .up()

    .ele("string")
    .txt("Pressed")
    .up()

    .ele("key")
    .txt("KeyCode")
    .up()

    .ele("integer")
    .txt("17")
    .up()

    .ele("key")
    .txt("MacroTriggerType")
    .up()

    .ele("string")
    .txt("HotKey")
    .up()

    .ele("key")
    .txt("Modifiers")
    .up()

    .ele("integer")
    .txt("6400")
    .up()

    .up()
    .up()

    .ele("key")
    .txt("UID")
    .up()

    .ele("string")
    .txt("C22E880A-8214-415E-84E5-A136C266CAA7")
    .up()

    .up()
    .up()

    .ele("key")
    .txt("Name")
    .up()

    .ele("string")
    .txt("Global Macro Group")
    .up()

    .ele("key")
    .txt("ToggleMacroUID")
    .up()

    .ele("string")
    .txt("169256A3-6E14-4492-88C6-A3B8E8103C3F")
    .up()

    .ele("key")
    .txt("UID")
    .up()

    .ele("string")
    .txt("804D32AF-0B39-439F-8EF3-493A833B14CA")
    .up()

    .up()
    .up()
    .up();
}
